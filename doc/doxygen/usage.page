/** 
\page install Installation and Usage

\section Installation

To get the latest version of v2fun directly on Stampede, run the command:

<div class="fragment"><pre class="fragment">> wget http://users.ices.utexas.edu/~gopal/v2fun/v2fun_Yalla.tar
</pre></div><p><a class="anchor" id="Installation"></a> </p>

Follow this command with: 

<div class="fragment"><pre class="fragment">> tar -xf v2fun_Yalla.tar
</pre></div><p><a class="anchor" id="Installation"></a> </p>

Before building v2fun, one must load the appropriate modules, namely gsl and grvy. A typical way to do this would be:

<div class="fragment"><pre class="fragment">> module load gcc/4.7.1
> module load gsl
> module load grvy
</pre></div><p><a class="anchor" id="Installation"></a> </p>

After loading the requisite modules and moving into the 'v2fun_Yalla/' directory, issue a make command in the root directory to see all available targets, i.e., 

<div class="fragment"><pre class="fragment">> make
Available make targets:
  install   : build main program in /src/
  check     : build and run test unit test suite in /test/unit
  coverage  : build lcov in include/lcov, build tests with --coverage option, run lcov, 
  		and generate html in /test/unit/lcov_html
  doc       : build documentation (doxygen page, and writeup)
 </pre></div><p><a class="anchor" id="Installation"></a> </p>

There are also 2 PHONY targets in the Makefile: clobber and clean. Note, there are a total of four Makefiles in the project: 
<ul>
<li> Makefile
<li> src/Makefile
<li> test/unit/Makefile
<li> doc/writeup/Makefile
</ul>

Only the Makefile in the root directory should be called as it interacts with the other Makefiles. To build v2fun in the src/ directory, run 

<div class="fragment"><pre class="fragment">> make install
</pre></div><p><a class="anchor" id="Installation"></a> </p>

To verify that the software is working properly, a test option is provided to run a short suite of functionality tests against the local build. To run issue a 'make check' to initiate the tests. If succesful, output similar to the following will be generated: 

<div class="fragment"><pre class="fragment">> make check
-------------------------------------------------------
Running Unit Test Suite
-------------------------------------------------------
PASS: Interpolation Test
PASS: Getting inputs
PASS: Saving Results
PASS: Compute Turbulent Time Scale, T
PASS: Compute Tubulent Length Scale, L
PASS: Compute Eddy Viscosity, vT
PASS: Compute Production Rate, P
PASS: Compute Dissipation at Wall
PASS: Compute redistribution at Wall
PASS: Setting U terms in system
PASS: Setting k terms in system
PASS: Setting ep terms in system
PASS: Setting v2 terms in system
PASS: Setting f terms in system
PASS: Putting system together 
-------------------------------------------------------
 </pre></div><p><a class="anchor" id="Installation"></a> </p>

Finally, to check the code coverage of the unit tests, issue a 'make coverage' to run lcov on the test suite and save the coverage info and html files in the directory test/unit/ as follows: 

<div class="fragment"><pre class="fragment">> make coverage
</pre></div><p><a class="anchor" id="Installation"></a> </p>

The current code coverage results can be found <a href="http://users.ices.utexas.edu/~gopal/v2fun/lcov_html/">here</a>.

\section usage Usage

To begin using v2fun, enter the src/ directory. The main way to interact with v2fun is through the input file <i>input_file.txt</i>, which is parsed by the GRVY library. The parameters are detailed in the input file provided. Specifically, one can adjust model constants, change the step size in the wall normal direction, and indicate which data file from the data/ directory to use for initial conditions. Two data files are provided with v2fun (one for Reynolds number 180, and one for Reynolds number 2000), and the README file in the data/ directory explains how to easily generate more. Additionally, a paramter for logging is included to suppress or expand the program output. Once the input file is to your liking, run v2fun as, 

<div class="fragment"><pre class="fragment">> ./v2fun
</pre></div><p><a class="anchor" id="Installation"></a> </p>

The result of the code will be written to the output file specified in the input file. A simple gnuplotting script to view the resulting mean velocity profile is contained in the test/system/ directory. Once the bugs are fixed, we hope to include more features for viewing and verifying the results. 

\section directree Directory Tree 

In case you get lost, a detailed directory tree is below: 

<div class="fragment"><pre class="fragment">v2fun_Yalla
├── data........................Data for initial conditions and results 
├── doc.........................Documentation 
│   ├── doxygen.................Doxygen directory
│   │   ├── html................Doxygen generated html page 
│   │   ├── latex...............Latex page for completion...see html page
│   └── writeup.................Detailed model documentation
├── include.....................External program / files.
│   ├── lcov....................Used for code coverage
│   │   └── bin.................Holds lcov command
│   └── loglevel.h..............log level file for logging
├── Makefile....................Primary Makefile
├── README......................Information file
├── src.........................Contains source code for v2fun
└── test........................Test suite for v2fun
    ├── system..................To hold regression tests in future version
    └── unit....................Unit tests
 </pre></div><p><a class="anchor" id="Installation"></a> </p>
*/
